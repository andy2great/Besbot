{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA,mGAAwC;AACxC,4FAAiC;AACjC,2FAAgC;;;;;;;;;;;ACFhC,0CAA6B;AAEtB,MAAM,KAAK,GAAG,CAAC,OAAe,EAAQ,EAAE;IAC7C,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC;IAC/B,IAAI,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;QACnC,MAAM,OAAO,GAAG,EAAE,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;QACtD,OAAO,CAAC,KAAK,CAAC,SAAS,OAAO,oBAAoB,CAAC;QACnD,OAAO,CAAC,KAAK,EAAE;KAChB;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;KACnC;AACH,CAAC;AATY,aAAK,SASjB;;;;;;;;;;;;ACVD,yCAA4B;AAE5B,MAAa,UAAU;IAAvB;QAcE,YAAO,GAAG,CAAC,GAAW,EAAE,QAAiB,EAAE,QAAiB,EAAE,EAAE;YAC9D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;gBAClC,QAAQ;gBACR,QAAQ;aACT,CAAC;YAEF,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBACjC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;YAC1B,CAAC,CAAC;QACJ,CAAC;QAED,WAAM,GAAG,CAAC,KAAa,EAAE,OAAe,EAAE,EAAE;YAC1C,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAM;YAE5B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC;QACzC,CAAC;QAED,WAAM,GAAG,CAAC,WAAmB,EAAE,QAAmC,EAAE,EAAE;YACpE,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAM;YAE5B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;YACtC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;gBAC/C,IAAI,WAAW,KAAK,KAAK;oBAAE,OAAM;gBACjC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YAC9B,CAAC,CAAC;QACJ,CAAC;IACH,CAAC;;AAzCD,gCAyCC;;AApCQ,sBAAW,GAAG,GAAG,EAAE;IACxB,IAAI,EAAI,CAAC,SAAS,EAAE;QAClB,OAAO,EAAI,CAAC,SAAS;KACtB;IAED,EAAI,CAAC,SAAS,GAAG,IAAI,UAAU,EAAE;IACjC,OAAO,EAAI,CAAC,SAAS;AACvB,CAAC;;;;;;;;;;;;ACfH,4CAA+B;AAY/B,MAAa,SAAS;IAAtB;QAIE,cAAS,GAAqB,EAAE;QAWhC,YAAO,GAAG,CAAC,IAAY,EAAE,EAAE;YACzB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC;YACvD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;gBAC5B,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,EAAE,CAAC;YAC/C,CAAC,CAAC;YAEF,OAAO,SAAS;QAClB,CAAC;QAED,WAAM,GAAG,CAAC,QAAwB,EAAE,EAAE;YACpC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/B,CAAC;QAED,SAAI,GAAG,CAAC,IAAY,EAAE,OAAe,EAAE,IAAqB,EAAE,EAAE;YAC9D,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE;YAE/B,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE;gBACjC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBAClC,MAAM,CAAC,GAAG,EAAE;YACd,CAAC,CAAC;QACJ,CAAC;QAEgB,uBAAkB,GAAG,CAAC,IAAgB,EAAE,EAAE;YACzD,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;gBACrB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAoB;gBAE3D,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,CAAC;gBACjG,KAAK,MAAM,WAAW,IAAI,YAAY;oBAAE,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;YAC5E,CAAC,CAAC;YAEF,MAAM,UAAU,GAAG,IAAI;YACvB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;YACtB,IAAI,CAAC,GAAG,EAAE;QACZ,CAAC;IACH,CAAC;;AAjDD,8BAiDC;;AA3CQ,qBAAW,GAAG,GAAG,EAAE;IACxB,IAAI,EAAI,CAAC,SAAS,EAAE;QAClB,OAAO,EAAI,CAAC,SAAS;KACtB;IAED,EAAI,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE;IAChC,OAAO,EAAI,CAAC,SAAS;AACvB,CAAC;;;;;;;;ACzBH;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,qEAAkD;AAElD,MAAM,YAAY,GAAG,IAAI;AACzB,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,YAAY;AAErD,MAAM,SAAS,GAAG,mBAAS,CAAC,WAAW,EAAE;AACzC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC;AACvB,SAAS,CAAC,MAAM,CAAC;IACf,WAAW,EAAE,KAAK;IAClB,QAAQ,EAAE,eAAK;CAChB,CAAC","sources":["webpack://besbot/./libs/helpers/src/index.ts","webpack://besbot/./libs/helpers/src/lib/host-communication.ts","webpack://besbot/./libs/helpers/src/lib/mqtt-client.ts","webpack://besbot/./libs/helpers/src/lib/tcp-client.ts","webpack://besbot/external commonjs \"mqtt\"","webpack://besbot/external commonjs \"tslib\"","webpack://besbot/external node-commonjs \"node:fs\"","webpack://besbot/external node-commonjs \"node:net\"","webpack://besbot/webpack/bootstrap","webpack://besbot/./apps/mouth/src/main.ts"],"sourcesContent":["export * from './lib/host-communication'\nexport * from './lib/mqtt-client'\nexport * from './lib/tcp-client'\n","import * as fs from 'node:fs'\n\nexport const speak = (message: string): void => {\n  console.log('message', message)\n  if (fs.existsSync('/hostpipe/pipe')) {\n    const wstream = fs.createWriteStream('/hostpipe/pipe')\n    wstream.write(`echo \"${message}\" | festival --tts`)\n    wstream.close()\n  } else {\n    console.log('file does not exist')\n  }\n}\n","import type { MqttClient } from 'mqtt'\r\nimport * as mqtt from 'mqtt'\r\n\r\nexport class MQTTClient {\r\n  private static _instance: MQTTClient | undefined\r\n\r\n  private mqttClient: MqttClient | undefined\r\n\r\n  static getInstance = () => {\r\n    if (this._instance) {\r\n      return this._instance\r\n    }\r\n\r\n    this._instance = new MQTTClient()\r\n    return this._instance\r\n  }\r\n\r\n  connect = (url: string, username?: string, password?: string) => {\r\n    this.mqttClient = mqtt.connect(url, {\r\n      username,\r\n      password,\r\n    })\r\n\r\n    this.mqttClient.on('connect', () => {\r\n      console.log('connected')\r\n    })\r\n  }\r\n\r\n  notify = (topic: string, message: string) => {\r\n    if (!this.mqttClient) return\r\n\r\n    this.mqttClient.subscribe(topic)\r\n    this.mqttClient.publish(topic, message)\r\n  }\r\n\r\n  listen = (listenTopic: string, callback: (message: string) => void) => {\r\n    if (!this.mqttClient) return\r\n\r\n    this.mqttClient.subscribe(listenTopic)\r\n    this.mqttClient.on('message', (topic, message) => {\r\n      if (listenTopic !== topic) return\r\n      callback(message.toString())\r\n    })\r\n  }\r\n}\r\n","import * as net from 'node:net'\r\n\r\nexport interface SocketPublisher {\r\n  message: string\r\n  destination: string\r\n}\r\n\r\nexport interface SocketListener {\r\n  destination: string\r\n  callback: (message: string) => void\r\n}\r\n\r\nexport class TCPClient {\r\n  private static _instance: TCPClient | undefined\r\n\r\n  server: net.Server | undefined\r\n  listeners: SocketListener[] = []\r\n\r\n  static getInstance = () => {\r\n    if (this._instance) {\r\n      return this._instance\r\n    }\r\n\r\n    this._instance = new TCPClient()\r\n    return this._instance\r\n  }\r\n\r\n  connect = (port: number) => {\r\n    this.server = net.createServer(this.onClientConnection)\r\n    this.server.listen(port, () => {\r\n      console.log(`Server started on port ${port}`)\r\n    })\r\n\r\n    return TCPClient\r\n  }\r\n\r\n  listen = (listener: SocketListener) => {\r\n    this.listeners.push(listener)\r\n  }\r\n\r\n  send = (port: number, address: string, info: SocketPublisher) => {\r\n    const client = new net.Socket()\r\n\r\n    client.connect(port, address, () => {\r\n      client.write(JSON.stringify(info))\r\n      client.end()\r\n    })\r\n  }\r\n\r\n  private readonly onClientConnection = (sock: net.Socket) => {\r\n    sock.on('data', data => {\r\n      const json = JSON.parse(data.toString()) as SocketPublisher\r\n\r\n      const destinations = this.listeners.filter(listener => listener.destination === json.destination)\r\n      for (const destination of destinations) destination.callback(json.message)\r\n    })\r\n\r\n    const serverResp = 'ok'\r\n    sock.write(serverResp)\r\n    sock.end()\r\n  }\r\n}\r\n","module.exports = require(\"mqtt\");","module.exports = require(\"tslib\");","module.exports = require(\"node:fs\");","module.exports = require(\"node:net\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { speak, TCPClient } from '@besbot/helpers'\n\nconst DEFAULT_PORT = 8081\nconst port = Number(process.env.port) || DEFAULT_PORT\n\nconst tcpClient = TCPClient.getInstance()\ntcpClient.connect(port)\ntcpClient.listen({\n  destination: 'say',\n  callback: speak,\n})\n"],"names":[],"sourceRoot":""}